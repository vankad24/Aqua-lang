abstract class Collection<T> : Iterable<T>{
	
	protected debug{
		checkIndex(int index){
			if (index>=len || index < 0)throw Exception("Index out of bounds")
		}
		
		checkLen(){
			if (len<0)throw Exception("Length can't be less than 0")
		}
	}
	
	abstract{
		Collection(int length)

		Collection(Iterable<T> iter)
		
		// Collection.move(Collection $coll)
		
		Collection<T>$ _+(Iterable<T> iter)
	}
	
	map<U>(Funtion<T, int => U> fun){
		new_data = new<U>(len)
		for (i:len)new_data.iterate(i) = fun(iterate(i),i)
		return $new_data
	}
	
	map(Class<new(T)> cls){
		new_data = new<cls>(len)
		for (i:len)new_data.iterate(i) = cls(iterate(i))
		return $new_data
	}
	
	forEach(Funtion<T, int=>void> fun){
        for (i : len)
            fun(iterate(i),i)
    }
	
	reduce(Funtion<T, T=>T$> fun){
        value = $iterate(0)
        for (x:this) {
            value = fun(value, x)
        }
        return $value
    }
	
	reduce(Funtion<T, T=>T$> fun, T startValue){
        value = $startValue
        for (x:this) {
            value = fun(value, x)
        }
        return $value
    }
	
	reverse(){
		copy = $this
        for (i : len/2) {
            index = len - i - 1
			copy.iterate(i), copy.iterate(index) = copy.iterate(index), copy.iterate(i)
        }
        return $copy
    }
	
	sum(){
        sum = $iterate(0)
        for (i=1 : len)sum+=iterate(i)
        return $sum
    }

    mean()=> sum()/len
	
	min(Funtion<T,T=>bool> comparator = (=>it[0]<it[1]) ){
        m = iterate(0) //m is read-only reference
        for (i=1 : len)
            if (comparator(iterate(i), m))m=iterate(i)
        return $m
    }
	
	max(Funtion<T,T=>bool> comparator = (=>it[0]>it[1]) ){
        m = iterate(0) //m is read-only reference
        for (i=1 : len)
            if (comparator(iterate(i), m))m=iterate(i)
        return $m
    }
    
	_==(Iterable<T> iter){
		if (len!=iter.len)return false
		for (i : len){
			if (iter.iterate(i)!=iterate(i))return false
		}
		return true
	}
	
	_!=(Iterable<T> iter){
		if (len!=iter.len)return true
		for (i : len){
			if (iter.iterate(i)!=iterate(i))return true
		}
		return false
	}
	
	_[:](int start = 0, int end = len){
		//todo
	}
	
	_+=(T value) => for(i:len)iterate(i)+=value
	
	_+(T value) => $this+=value
	
	_-=(T value) => for(i:len)iterate(i)-=value
	
	_-(T value) => $this-=value
	
	_/=(T value) => for(i:len)iterate(i)/=value
	
	_/(T value) => $this/=value
	
	_*=(T value) => for(i:len)iterate(i)*=value
	
	_*(T value) => $this*=value
	
	fill(T value){
		for (i:len) iterate(i) = value
	}
	
	isEmpty() => len == 0
	
	contains(T value){
        for (i:len) {
            if (iterate(i)==value)return true
        }
        return false
    }
	
	indexOf(T value, int startIndex = 0){
		if (startIndex<0)startIndex+=len
        checkIndex(startIndex)
		for (i=startIndex : len)
            if (iterate(i) == value)return i
        return -1
	}
	
	lastIndexOf(T value, int startIndex = len-1){
		if (startIndex<0)startIndex+=len
        checkIndex(startIndex)
		for (i=len-1 i>=0 i--)
            if (iterate(i) == value)return i
        return -1
	}
    
    
	binarySearch(T key, int fromIndex=0, int toIndex=len) {
        if (fromIndex<0)fromIndex+=len
        if (toIndex<0)toIndex+=len
        if (fromIndex>toIndex|| toIndex > len)throw Exception("Invalid index")
        low = fromIndex
        high = toIndex - 1

        while (low <= high) {
            mid = (low + high) >> 1
            midVal = iterate(mid)

            if (midVal < key)
                low = mid + 1
            else if (midVal > key)
                high = mid - 1
            else
                return mid // key found
        }
        return -(low + 1)  // key not found.
    }
}