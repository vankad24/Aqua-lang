class Array<T> : Collection<T>{
    //from Collection
    //const int len, map(), reduce(), filter(), etc
    private{
		Pointer<T> data
		
		debug checkIndex(int index){
			if (index>=len || index < 0)throw Exception("Index out of bounds")
		}
		
		debug checkLen(){
			if (len<0)throw Exception("Length can't be less than 0")
		}
	}

    const int MAX_LEN = int.MAX

    Array() => this(0)
    
    Array(int length){
        len = length
		checkLen()
        data = allocNew(length)
    }
    
    Array.raw(int length){
        len = length
		checkLen()
        data = alloc(length)
    }
    
    Array(Iterable<T> iter){
        len = iter.len
        //todo
    }
    
    _[](int index){
        if (index<0)index+=len
        checkIndex(index)
        return data[index]
    }
    
	_==(Array<T> arr){
		if (len!=arr.len)return false
		for (i : len){
			if (arr.data[i]!=data[i])return false
		}
		return true
	}
	
	_!=(Array<T> arr) => !( _==(arr) )
	
	_[:](int start = 0, int end = len){
		//todo
	}
	
	_+=(T value) => for(i:len)data[i]+=value
	
	_+(T value) => $this+=value
	
	_-=(T value) => for(i:len)data[i]-=value
	
	_-(T value) => $this-=value
	
	_/=(T value) => for(i:len)data[i]/=value
	
	_/(T value) => $this/=value
	
	_*=(T value) => for(i:len)data[i]*=value
	
	_*(T value) => $this*=value

	:str{
		s = "["
		for (i:len-1){
			s+= data[i]
			s+= ", "
		}
		if (len)s += data[len - 1]
		return s + "]"
	}
	
	fill(T value){
		for (i:len) data[i] = value
	}
	
	isEmpty() => len == 0
	
	contains(T value){
        for (i:len) {
            if (data[i]==value)return true;
        }
        return false;
    }
	
	indexOf(T value, int startIndex = 0){
		if (startIndex<0)startIndex+=len
        checkIndex(startIndex)
		for (i=startIndex : len)
            if (data[i] == value)return i;
        return -1;
	}
	
	lastIndexOf(T value, int startIndex = len-1){
		if (startIndex<0)startIndex+=len
        checkIndex(startIndex)
		for (i=len-1; i>=0; i--)
            if (data[i] == value)return i;
        return -1;
	}
    
    
	binarySearch(T key, int fromIndex=0, int toIndex=len) {
        if (fromIndex<0)fromIndex+=len
        if (toIndex<0)toIndex+=len
        if (fromIndex>toIndex|| toIndex > len)throw Exception("Invalid index")
        low = fromIndex;
        high = toIndex - 1;

        while (low <= high) {
            mid = (low + high) >> 1;
            midVal = data[mid];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
    }

}